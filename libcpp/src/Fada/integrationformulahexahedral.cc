#include  "Fada/integrationformulahexahedral.h"
#include  <cassert>

using namespace Fada;


/*---------------------------------------------------------*/
HexTrapez::HexTrapez() : IntegrationFormulaBase<8>()
{
  for(int i = 0; i < 8; i++)
  {
    w(i) = 1.0;
  }
  // phi()[0] = 0.125*( 1.0-xhat.x() )*( 1.0-xhat.y() )*( 1.0-xhat.z() );
  // phi()[1] = 0.125*( 1.0+xhat.x() )*( 1.0-xhat.y() )*( 1.0-xhat.z() );
  // phi()[2] = 0.125*( 1.0+xhat.x() )*( 1.0+xhat.y() )*( 1.0-xhat.z() );
  // phi()[3] = 0.125*( 1.0-xhat.x() )*( 1.0+xhat.y() )*( 1.0-xhat.z() );
  // phi()[4] = 0.125*( 1.0-xhat.x() )*( 1.0-xhat.y() )*( 1.0+xhat.z() );
  // phi()[5] = 0.125*( 1.0+xhat.x() )*( 1.0-xhat.y() )*( 1.0+xhat.z() );
  // phi()[6] = 0.125*( 1.0+xhat.x() )*( 1.0+xhat.y() )*( 1.0+xhat.z() );
  // phi()[7] = 0.125*( 1.0-xhat.x() )*( 1.0+xhat.y() )*( 1.0+xhat.z() );

  c(0).x() = -1.0;  c(0).y() = -1.0;  c(0).z() = -1.0;
  c(1).x() = +1.0;  c(1).y() = -1.0;  c(1).z() = -1.0;
  c(2).x() = +1.0;  c(2).y() = +1.0;  c(2).z() = -1.0;
  c(3).x() = -1.0;  c(3).y() = +1.0;  c(3).z() = -1.0;
  c(4).x() = -1.0;  c(4).y() = -1.0;  c(4).z() = +1.0;
  c(5).x() = +1.0;  c(5).y() = -1.0;  c(5).z() = +1.0;
  c(6).x() = +1.0;  c(6).y() = +1.0;  c(6).z() = +1.0;
  c(7).x() = -1.0;  c(7).y() = +1.0;  c(7).z() = +1.0;
}

/*---------------------------------------------------------*/

HexGauss3D_1_0::HexGauss3D_1_0() : IntegrationFormulaBase<1>()
{
  w(0) = 8.0;

  c(0).x() = 0.0;
  c(0).y() = 0.0;
  c(0).z() = 0.0;
}

/*---------------------------------------------------------*/

HexGauss3D_6_2::HexGauss3D_6_2() : IntegrationFormulaBase<6>()
{
  c(0).x() = 1.000000000000000;
  c(0).y() = 0.000000000000000;
  c(0).z() = 0.000000000000000;
  w(0) = 1.333333333333333;
  c(1).x() = -1.000000000000000;
  c(1).y() =  0.000000000000000;
  c(1).z() =   0.000000000000000;
  w(1) =  1.333333333333333;
  c(2).x() = 0.000000000000000;
  c(2).y() =  1.000000000000000;
  c(2).z() =   0.000000000000000;
  w(2) =  1.333333333333333;
  c(3).x() = 0.000000000000000;
  c(3).y() =  -1.000000000000000;
  c(3).z() =   0.000000000000000;
  w(3) =  1.333333333333333;
  c(4).x() = 0.000000000000000;
  c(4).y() =  0.000000000000000;
  c(4).z() =  1.000000000000000;
  w(4) =  1.333333333333333;
  c(5).x() = 0.000000000000000;
  c(5).y() =   0.000000000000000;
  c(5).z() =   -1.000000000000000;
  w(5) =  1.333333333333333;
}

/*---------------------------------------------------------*/

HexGauss3D_14_4::HexGauss3D_14_4() : IntegrationFormulaBase<14>()
{
  c(0).x() = 0.795822425754221;
  c(0).y() =   0.000000000000000;
  c(0).z() =  0.000000000000000;
  w(0) =  0.886426592797784;
  c(1).x() = -0.795822425754221;
  c(1).y() =   0.000000000000000;
  c(1).z() =   0.000000000000000;
  w(1) =   0.886426592797784;
  c(2).x() = 0.000000000000000;
  c(2).y() =   0.795822425754221;
  c(2).z() =   0.000000000000000;
  w(2) =  0.886426592797784;
  c(3).x() = 0.000000000000000;
  c(3).y() =  -0.795822425754221;
  c(3).z() =   0.000000000000000;
  w(3) =   0.886426592797784;
  c(4).x() = 0.000000000000000;
  c(4).y() =   0.000000000000000;
  c(4).z() =   0.795822425754221;
  w(4) =   0.886426592797784;
  c(5).x() = 0.000000000000000;
  c(5).y() =   0.000000000000000;
  c(5).z() =   -0.795822425754221;
  w(5) =   0.886426592797784;
  c(6).x() = 0.758786910639328;
  c(6).y() =   0.758786910639328;
  c(6).z() =   0.758786910639328;
  w(6) =   0.335180055401662;
  c(7).x() = 0.758786910639328;
  c(7).y() =   -0.758786910639328;
  c(7).z() =   0.758786910639328;
  w(7) =   0.335180055401662;
  c(8).x() = 0.758786910639328;
  c(8).y() =   0.758786910639328;
  c(8).z() =   -0.758786910639328;
  w(8) =   0.335180055401662;
  c(9).x() = 0.758786910639328;
  c(9).y() =   -0.758786910639328;
  c(9).z() =   -0.758786910639328;
  w(9) =   0.335180055401662;
  c(10).x() = -0.758786910639328;
  c(10).y() =   0.758786910639328;
  c(10).z() =   0.758786910639328;
  w(10) =   0.335180055401662;
  c(11).x() = -0.758786910639328;
  c(11).y() =   -0.758786910639328;
  c(11).z() =   0.758786910639328;
  w(11) =   0.335180055401662;
  c(12).x() = -0.758786910639328;
  c(12).y() =   0.758786910639328;
  c(12).z() =   -0.758786910639328;
  w(12) =   0.335180055401662;
  c(13).x() = -0.758786910639328;
  c(13).y() =   -0.758786910639328;
  c(13).z() =   -0.758786910639328;
  w(13) =   0.335180055401662;
}

/*---------------------------------------------------------*/

template<int N, class Line>
TensorFormula3d<N, Line>::TensorFormula3d() : IntegrationFormulaBase<N*N*N>()
{
  Line L;
  if(L.n() != N)
  {
    IntegrationFormulaBase<N*N*N>::_error_string("TensorFormula3d", "N", N);
  }
  for(int ix = 0; ix < N; ix++)
  {
    for(int iy = 0; iy < N; iy++)
    {
      for(int iz = 0; iz < N; iz++)
      {
        int i = N*N*ix+N*iy+iz;
        Alat::Node pi;
        L.point(pi, ix);
        IntegrationFormulaBase<N*N*N>::c(i).x() = 2.0*pi.x()-1.0;
        L.point(pi, iy);
        IntegrationFormulaBase<N*N*N>::c(i).y() = 2.0*pi.x()-1.0;
        L.point(pi, iz);
        IntegrationFormulaBase<N*N*N>::c(i).z() = 2.0*pi.x()-1.0;
        IntegrationFormulaBase<N*N*N>::w(i) = 8.0*L.weight(ix)*L.weight(iy)*L.weight(iz);
      }
    }
  }
}

/*------------------------------------------------------------*/

template class Fada::TensorFormula3d<1, LineGauss1>;
template class Fada::TensorFormula3d<2, LineTrapez>;
template class Fada::TensorFormula3d<2, LineGauss2>;
template class Fada::TensorFormula3d<3, LineGauss3>;
template class Fada::TensorFormula3d<4, LineGauss4>;
template class Fada::TensorFormula3d<5, LineGauss5>;
