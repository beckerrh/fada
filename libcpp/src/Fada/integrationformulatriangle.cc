#include  "Fada/integrationformulatriangle.h"

using namespace Fada;

/*--------------------------------------------------------------------------*/
std::string TriangleMidPoint::getName() const
{
  return "TriangleMidPoint";
}
TriangleMidPoint::TriangleMidPoint() : IntegrationFormulaBase<1>()
{
  w(0) = 0.5;
  c(0).x() = 0.3333333333333333;
  c(0).y() = 0.3333333333333333;
}

/*--------------------------------------------------------------------------*/
std::string TriangleTrapez::getName() const
{
  return "TriangleTrapez";
}
TriangleTrapez::TriangleTrapez() : IntegrationFormulaBase<3>()
{
  w(0) = 0.5/3.0;
  w(1) = 0.5/3.0;
  w(2) = 0.5/3.0;

  c(0).x() = 0.0;
  c(0).y() = 0.0;
  c(1).x() = 1.0;
  c(1).y() = 0.0;
  c(2).x() = 0.0;
  c(2).y() = 1.0;
}

/*--------------------------------------------------------------------------*/
std::string TriangleRotatedTrapez::getName() const
{
  return "TriangleRotatedTrapez";
}
TriangleRotatedTrapez::TriangleRotatedTrapez() : IntegrationFormulaBase<3>()
{
  w(0) = 0.5/3.0;
  w(1) = 0.5/3.0;
  w(2) = 0.5/3.0;

  c(0).x() = 0.5;
  c(0).y() = 0.0;
  c(1).x() = 0.5;
  c(1).y() = 0.5;
  c(2).x() = 0.0;
  c(2).y() = 0.5;
}

/*--------------------------------------------------------------------------*/
std::string TriangleSimpson::getName() const
{
  return "TriangleSimpson";
}
TriangleSimpson::TriangleSimpson() : IntegrationFormulaBase<7>()
{
  w(0) = 9./40.;
  w(1) = 1./40.;
  w(2) = 1./40.;
  w(3) = 1./40.;
  w(4) = 2./30.;
  w(5) = 2./30.;
  w(6) = 2./30.;

  c(0).x() = 0.3333333333333333;
  c(0).y() = 0.3333333333333333;
  c(1).x() = 0.0;
  c(1).y() = 0.0;
  c(2).x() = 1.0;
  c(2).y() = 0.0;
  c(3).x() = 0.0;
  c(3).y() = 1.0;
  c(4).x() = 0.5;
  c(4).y() = 0.0;
  c(5).x() = 0.5;
  c(5).y() = 0.5;
  c(6).x() = 0.0;
  c(6).y() = 0.5;
}

/*--------------------------------------------------------------------------*/
std::string TriangleDegree4::getName() const
{
  return "TriangleDegree4";
}
TriangleDegree4::TriangleDegree4() : IntegrationFormulaBase<7>()
{
  w(0) = 0.5*0.37500;
  w(1) = 0.5*0.104166666666667;
  w(2) = 0.5*0.104166666666667;
  w(3) = 0.5*0.104166666666667;
  w(4) = 0.5*0.104166666666667;
  w(5) = 0.5*0.104166666666667;
  w(6) = 0.5*0.104166666666667;

  c(0).x() = 1.0/ 3.0;
  c(0).y() = 1./3.;
  c(1).x() = 0.736712498968435;
  c(1).y() = 0.237932366472434;
  c(2).x() = c(1).x();
  c(2).y() = 0.025355134551932;
  c(3).x() = c(1).y();
  c(3).y() = c(1).x();
  c(4).x() = c(3).x();
  c(4).y() = c(2).y();
  c(5).x() = c(2).y();
  c(5).y() = c(1).x();
  c(6).x() = c(2).y();
  c(6).y() = c(1).y();
}

/*--------------------------------------------------------------------------*/
std::string TriangleDegree6::getName() const
{
  return "TriangleDegree6";
}
TriangleDegree6::TriangleDegree6() : IntegrationFormulaBase<12>()
{
  w(0) = 0.0508449063702070*0.5;
  w(1) = w(0);
  w(2) = w(0);
  w(3) = 0.1167862757263790*0.5;
  w(4) = w(3);
  w(5) = w(3);
  w(6) = 0.082851075618374*0.5;
  w(7) = w(6);
  w(8) = w(6);
  w(9) = w(6);
  w(10) = w(6);
  w(11) = w(6);

  c(0).x() = 0.8738219710169960;
  c(0).y() = 0.0630890144915020;
  c(1).x() = 0.0630890144915020;
  c(1).y() = 0.8738219710169960;
  c(2).x() = 0.0630890144915020;
  c(2).y() = 0.0630890144915020;
  c(3).x() = 0.5014265096581790;
  c(3).y() = 0.2492867451709100;
  c(4).x() = 0.2492867451709100;
  c(4).y() = 0.5014265096581790;
  c(5).x() = 0.2492867451709100;
  c(5).y() = 0.2492867451709100;
  c(6).x() = 0.6365024991213990;
  c(6).y() = 0.3103524510337850;
  c(7).x() = 0.6365024991213990;
  c(7).y() = 0.0531450498448160;
  c(8).x() = 0.3103524510337850;
  c(8).y() = 0.6365024991213990;
  c(9).x() = 0.3103524510337850;
  c(9).y() = 0.0531450498448160;
  c(10).x() = 0.0531450498448160;
  c(10).y() = 0.6365024991213990;
  c(11).x() = 0.0531450498448160;
  c(11).y() = 0.3103524510337850;
}

/*--------------------------------------------------------------------------*/
std::string TriangleDegree8::getName() const
{
  return "TriangleDegree8";
}
TriangleDegree8::TriangleDegree8() : IntegrationFormulaBase<19>()
{
  w(0) = 0.5*0.097135796282796100;
  w(1) = 0.5*0.031334700227139830;
  w(2) = 0.5*0.031334700227139830;
  w(3) = 0.5*0.031334700227139830;
  w(4) = 0.5*0.077827541004775430;
  w(5) = 0.5*0.077827541004775430;
  w(6) = 0.5*0.077827541004775430;
  w(7) = 0.5*0.07964773892720910;
  w(8) = 0.5*0.07964773892720910;
  w(9) = 0.5*0.07964773892720910;
  w(10) = 0.5*0.02557767565869810;
  w(11) = 0.5*0.02557767565869810;
  w(12) = 0.5*0.02557767565869810;
  w(13) = 0.5*0.04328353937728940;
  w(14) = 0.5*0.04328353937728940;
  w(15) = 0.5*0.04328353937728940;
  w(16) = 0.5*0.04328353937728940;
  w(17) = 0.5*0.04328353937728940;
  w(18) = 0.5*0.04328353937728940;

  c(0).x() = 1.0 / 3.0;
  c(0).y() = 1.0 / 3.0;
  c(1).x() = 0.02063496160252593;
  c(1).y() = 0.4896825191987370;
  c(2).x() = 0.4896825191987370;
  c(2).y() = 0.02063496160252593;
  c(3).x() = 0.4896825191987370;
  c(3).y() = 0.4896825191987370;
  c(4).x() = 0.1258208170141290;
  c(4).y() = 0.4370895914929355;
  c(5).x() = 0.4370895914929355;
  c(5).y() = 0.1258208170141290;
  c(6).x() = 0.4370895914929355;
  c(6).y() = 0.4370895914929355;
  c(7).x() = 0.6235929287619356;
  c(7).y() = 0.1882035356190322;
  c(8).x() = 0.1882035356190322;
  c(8).y() = 0.6235929287619356;
  c(9).x() = 0.1882035356190322;
  c(9).y() = 0.1882035356190322;
  c(10).x() = 0.91054097321109410;
  c(10).y() = 0.044729513394452970;
  c(11).x() = 0.044729513394452970;
  c(11).y() = 0.91054097321109410;
  c(12).x() = 0.044729513394452970;
  c(12).y() = 0.044729513394452970;
  c(13).x() = 0.74119859878449800;
  c(13).y() = 0.036838412054736260;
  c(14).x() = 0.74119859878449800;
  c(14).y() = 0.221962889160765740;
  c(15).x() = 0.036838412054736260;
  c(15).y() = 0.74119859878449800;
  c(16).x() = 0.036838412054736260;
  c(16).y() = 0.221962889160765740;
  c(17).x() = 0.221962889160765740;
  c(17).y() = 0.74119859878449800;
  c(18).x() = 0.221962889160765740;
  c(18).y() = 0.036838412054736260;
}
